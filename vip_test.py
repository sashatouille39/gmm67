#!/usr/bin/env python3
"""
VIP Earnings Bonus Test - Review Request Fran√ßaise
Tests the VIP earnings problem with bonus according to the French review request
"""

import requests
import json
import sys
import os
from datetime import datetime

# Get backend URL from frontend .env file
def get_backend_url():
    try:
        with open('/app/frontend/.env', 'r') as f:
            for line in f:
                if line.startswith('REACT_APP_BACKEND_URL='):
                    return line.split('=', 1)[1].strip()
    except FileNotFoundError:
        return "http://localhost:8001"
    return "http://localhost:8001"

BACKEND_URL = get_backend_url()
API_BASE = f"{BACKEND_URL}/api"

def test_vip_earnings_bonus_problem():
    """Test CRITICAL: Probl√®me des gains VIP avec bonus - Review Request Fran√ßaise"""
    try:
        print("\nüéØ TESTING VIP EARNINGS BONUS PROBLEM - REVIEW REQUEST FRAN√áAISE")
        print("=" * 80)
        print("OBJECTIF: Tester le probl√®me des gains VIP avec bonus pour comprendre l'√©cart")
        print("entre l'affichage et les gains r√©els selon la demande fran√ßaise sp√©cifique")
        print()
        
        # Cr√©er une partie simple pour tester les gains VIP
        print("üîç √âTAPE 1: CR√âATION PARTIE SIMPLE POUR TEST VIP")
        print("-" * 60)
        
        # Cr√©er la partie avec salon VIP niveau 3 (5 VIPs)
        game_request = {
            "player_count": 20,
            "game_mode": "standard",
            "selected_events": [1, 2, 3, 4],  # 4 √©v√©nements pour simulation compl√®te
            "manual_players": [],
            "vip_salon_level": 3  # Niveau 3 = 5 VIPs selon la logique
        }
        
        response = requests.post(f"{API_BASE}/games/create", 
                               json=game_request, 
                               headers={"Content-Type": "application/json"},
                               timeout=20)
        
        if response.status_code != 200:
            print(f"‚ùå Impossible de cr√©er la partie - HTTP {response.status_code}: {response.text[:300]}")
            return False
            
        game_data = response.json()
        game_id = game_data.get('id')
        
        if not game_id:
            print("‚ùå Aucun ID de partie retourn√©")
            return False
        
        print(f"   ‚úÖ Partie cr√©√©e avec succ√®s: {game_id}")
        print(f"   üìä Joueurs dans la partie: {len(game_data.get('players', []))}")
        
        # V√©rifier les VIPs assign√©s avant simulation
        vip_response = requests.get(f"{API_BASE}/vips/salon/3", timeout=5)
        base_vip_total = 0
        if vip_response.status_code == 200:
            vips_data = vip_response.json()
            base_vip_total = sum(vip.get('viewing_fee', 0) for vip in vips_data.get('vips', []))
            print(f"   üí∞ VIPs salon niveau 3: {len(vips_data.get('vips', []))} VIPs")
            print(f"   üí∞ Total viewing_fee de base: {base_vip_total:,}$")
        else:
            print(f"   ‚ö†Ô∏è Impossible de r√©cup√©rer les VIPs salon niveau 3")
            base_vip_total = 0
        
        # √âtape 2: Simuler la partie jusqu'√† la fin avec un gagnant
        print("\nüîç √âTAPE 2: SIMULATION PARTIE JUSQU'√Ä LA FIN")
        print("-" * 60)
        
        simulation_count = 0
        max_simulations = 10  # Limite de s√©curit√©
        
        while simulation_count < max_simulations:
            simulation_count += 1
            
            # V√©rifier l'√©tat de la partie
            game_response = requests.get(f"{API_BASE}/games/{game_id}", timeout=10)
            if game_response.status_code != 200:
                break
                
            current_game = game_response.json()
            if current_game.get('completed', False):
                print(f"   ‚úÖ Partie termin√©e apr√®s {simulation_count-1} simulations")
                winner = current_game.get('winner')
                if winner:
                    print(f"   üèÜ Gagnant: {winner.get('name', 'Inconnu')} (#{winner.get('number', '???')})")
                break
            
            # Simuler un √©v√©nement
            sim_response = requests.post(f"{API_BASE}/games/{game_id}/simulate-event", timeout=15)
            if sim_response.status_code != 200:
                print(f"   ‚ùå Erreur simulation √©v√©nement {simulation_count}: HTTP {sim_response.status_code}")
                break
                
            sim_data = sim_response.json()
            result = sim_data.get('result', {})
            survivors = len(result.get('survivors', []))
            eliminated = len(result.get('eliminated', []))
            
            print(f"   üìä √âv√©nement {simulation_count}: {survivors} survivants, {eliminated} √©limin√©s")
            
            # V√©rifier si la partie est termin√©e
            updated_game = sim_data.get('game', {})
            if updated_game.get('completed', False):
                print(f"   ‚úÖ Partie termin√©e apr√®s {simulation_count} simulations")
                winner = updated_game.get('winner')
                if winner:
                    print(f"   üèÜ Gagnant: {winner.get('name', 'Inconnu')} (#{winner.get('number', '???')})")
                break
        
        if simulation_count >= max_simulations:
            print(f"   ‚ö†Ô∏è Limite de simulations atteinte ({max_simulations})")
        
        # √âtape 3: V√©rifier les gains VIP dans les 3 endroits
        print("\nüîç √âTAPE 3: V√âRIFICATION GAINS VIP DANS 3 ENDROITS")
        print("-" * 60)
        
        # 3.1: API /api/games/{game_id}/final-ranking - champ vip_earnings
        print("   üìä 3.1: API final-ranking - champ vip_earnings")
        final_ranking_response = requests.get(f"{API_BASE}/games/{game_id}/final-ranking", timeout=10)
        
        final_ranking_vip_earnings = 0
        if final_ranking_response.status_code == 200:
            final_ranking_data = final_ranking_response.json()
            final_ranking_vip_earnings = final_ranking_data.get('vip_earnings', 0)
            print(f"      ‚úÖ final-ranking vip_earnings: {final_ranking_vip_earnings:,}$")
        else:
            print(f"      ‚ùå Erreur final-ranking: HTTP {final_ranking_response.status_code}")
        
        # 3.2: API /api/games/{game_id}/vip-earnings-status - champ earnings_available
        print("   üìä 3.2: API vip-earnings-status - champ earnings_available")
        vip_status_response = requests.get(f"{API_BASE}/games/{game_id}/vip-earnings-status", timeout=10)
        
        vip_status_earnings = 0
        if vip_status_response.status_code == 200:
            vip_status_data = vip_status_response.json()
            vip_status_earnings = vip_status_data.get('earnings_available', 0)
            can_collect = vip_status_data.get('can_collect', False)
            print(f"      ‚úÖ vip-earnings-status earnings_available: {vip_status_earnings:,}$")
            print(f"      üìã can_collect: {can_collect}")
        else:
            print(f"      ‚ùå Erreur vip-earnings-status: HTTP {vip_status_response.status_code}")
        
        # 3.3: Gamestate avant/apr√®s pour voir l'argent r√©ellement ajout√©
        print("   üìä 3.3: Gamestate avant/apr√®s collection")
        
        # R√©cup√©rer le gamestate avant collection
        gamestate_before_response = requests.get(f"{API_BASE}/gamestate/", timeout=5)
        money_before = 0
        if gamestate_before_response.status_code == 200:
            gamestate_before = gamestate_before_response.json()
            money_before = gamestate_before.get('money', 0)
            print(f"      üí∞ Argent avant collection: {money_before:,}$")
        else:
            print(f"      ‚ùå Erreur gamestate avant: HTTP {gamestate_before_response.status_code}")
        
        # Collecter les gains VIP
        collect_response = requests.post(f"{API_BASE}/games/{game_id}/collect-vip-earnings", timeout=10)
        collected_amount = 0
        if collect_response.status_code == 200:
            collect_data = collect_response.json()
            collected_amount = collect_data.get('earnings_collected', 0)
            print(f"      ‚úÖ Collection r√©ussie: {collected_amount:,}$ collect√©s")
        else:
            print(f"      ‚ùå Erreur collection: HTTP {collect_response.status_code}: {collect_response.text[:200]}")
        
        # R√©cup√©rer le gamestate apr√®s collection
        gamestate_after_response = requests.get(f"{API_BASE}/gamestate/", timeout=5)
        money_after = 0
        actual_money_added = 0
        if gamestate_after_response.status_code == 200:
            gamestate_after = gamestate_after_response.json()
            money_after = gamestate_after.get('money', 0)
            actual_money_added = money_after - money_before
            print(f"      üí∞ Argent apr√®s collection: {money_after:,}$")
            print(f"      üí∞ Argent r√©ellement ajout√©: {actual_money_added:,}$")
        else:
            print(f"      ‚ùå Erreur gamestate apr√®s: HTTP {gamestate_after_response.status_code}")
        
        # √âtape 4: Calculer et comparer
        print("\nüîç √âTAPE 4: CALCUL ET COMPARAISON")
        print("-" * 60)
        
        # Comparer les 3 sources
        print(f"   üìä COMPARAISON DES 3 SOURCES:")
        print(f"      - final-ranking vip_earnings: {final_ranking_vip_earnings:,}$")
        print(f"      - vip-earnings-status earnings_available: {vip_status_earnings:,}$")
        print(f"      - Argent r√©ellement ajout√© au gamestate: {actual_money_added:,}$")
        
        # Analyser les √©carts
        sources_match = (final_ranking_vip_earnings == vip_status_earnings == actual_money_added)
        
        # √âvaluer le r√©sultat
        if sources_match:
            if final_ranking_vip_earnings > 0:
                print(f"‚úÖ GAINS VIP COH√âRENTS: Les 3 sources concordent ({final_ranking_vip_earnings:,}$)")
                success = True
            else:
                print(f"‚ùå AUCUN GAIN VIP: Les 3 sources concordent mais aucun gain d√©tect√©")
                success = False
        else:
            print(f"‚ùå INCOH√âRENCE GAINS VIP: Les sources ne concordent pas - "
                  f"final-ranking: {final_ranking_vip_earnings:,}$, "
                  f"vip-earnings-status: {vip_status_earnings:,}$, "
                  f"gamestate ajout√©: {actual_money_added:,}$")
            success = False
        
        # D√©tails pour debugging
        print(f"\n   üîç D√âTAILS POUR DEBUGGING:")
        print(f"      - Base VIP total: {base_vip_total:,}$")
        print(f"      - Sources concordent: {sources_match}")
        print(f"      - Gains d√©tect√©s: {final_ranking_vip_earnings > 0}")
        
        return success
        
    except Exception as e:
        print(f"‚ùå Erreur durant le test: {str(e)}")
        import traceback
        print(f"‚ùå Traceback: {traceback.format_exc()}")
        return False

if __name__ == "__main__":
    print(f"\nüéØ TEST DU PROBL√àME DES GAINS VIP AVEC BONUS - REVIEW REQUEST FRAN√áAISE")
    print(f"Backend URL: {BACKEND_URL}")
    print(f"API Base: {API_BASE}")
    print("=" * 80)
    
    # Test server connectivity first
    try:
        response = requests.get(f"{API_BASE}/", timeout=10)
        if response.status_code == 200:
            print("‚úÖ Server accessible")
        else:
            print("‚ùå Server not accessible, aborting tests")
            exit(1)
    except:
        print("‚ùå Server not accessible, aborting tests")
        exit(1)
    
    # Run the VIP earnings bonus test
    success = test_vip_earnings_bonus_problem()
    
    if success:
        print("\n‚úÖ TEST R√âUSSI: Les gains VIP fonctionnent correctement")
    else:
        print("\n‚ùå TEST √âCHOU√â: Probl√®me d√©tect√© avec les gains VIP")
    
    print("\n" + "=" * 80)